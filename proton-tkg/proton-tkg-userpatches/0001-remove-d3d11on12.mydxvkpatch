diff --git a/src/d3d11/d3d11_buffer.cpp b/src/d3d11/d3d11_buffer.cpp
index 11087a97..54c388e5 100644
--- a/src/d3d11/d3d11_buffer.cpp
+++ b/src/d3d11/d3d11_buffer.cpp
@@ -8,8 +8,7 @@ namespace dxvk {
   
   D3D11Buffer::D3D11Buffer(
           D3D11Device*                pDevice,
-    const D3D11_BUFFER_DESC*          pDesc,
-    const D3D11_ON_12_RESOURCE_INFO*  p11on12Info)
+    const D3D11_BUFFER_DESC*          pDesc)
   : D3D11DeviceChild<ID3D11Buffer>(pDevice),
     m_desc        (*pDesc),
     m_resource    (this),
@@ -84,27 +83,17 @@ namespace dxvk {
         info.access |= VK_ACCESS_HOST_WRITE_BIT;
     }
 
-    if (p11on12Info) {
-      m_11on12 = *p11on12Info;
-
-      DxvkBufferImportInfo importInfo;
-      importInfo.buffer = VkBuffer(m_11on12.VulkanHandle);
-      importInfo.offset = m_11on12.VulkanOffset;
-
-      if (m_desc.CPUAccessFlags)
-        m_11on12.Resource->Map(0, nullptr, &importInfo.mapPtr);
-
-      m_buffer = m_parent->GetDXVKDevice()->importBuffer(info, importInfo, GetMemoryFlags());
-      m_mapped = m_buffer->getSliceHandle();
-
-      m_mapMode = DetermineMapMode();
-    } else if (!(pDesc->MiscFlags & D3D11_RESOURCE_MISC_TILE_POOL)) {
+    if (!(pDesc->MiscFlags & D3D11_RESOURCE_MISC_TILE_POOL)) {
       // Create the buffer and set the entire buffer slice as mapped,
       // so that we only have to update it when invalidating the buffer
       m_buffer = m_parent->GetDXVKDevice()->createBuffer(info, GetMemoryFlags());
       m_mapped = m_buffer->getSliceHandle();
 
       m_mapMode = DetermineMapMode();
+
+      // For Stream Output buffers we need a counter
+      if (pDesc->BindFlags & D3D11_BIND_STREAM_OUTPUT)
+        m_soCounter = CreateSoCounterBuffer();
     } else {
       m_sparseAllocator = m_parent->GetDXVKDevice()->createSparsePageAllocator();
       m_sparseAllocator->setCapacity(info.size / SparseMemoryPageSize);
@@ -112,16 +101,11 @@ namespace dxvk {
       m_mapped = DxvkBufferSliceHandle();
       m_mapMode = D3D11_COMMON_BUFFER_MAP_MODE_NONE;
     }
-
-    // For Stream Output buffers we need a counter
-    if (pDesc->BindFlags & D3D11_BIND_STREAM_OUTPUT)
-      m_soCounter = CreateSoCounterBuffer();
   }
   
   
   D3D11Buffer::~D3D11Buffer() {
-    if (m_desc.CPUAccessFlags && m_11on12.Resource != nullptr)
-      m_11on12.Resource->Unmap(0, nullptr);
+
   }
   
   
@@ -257,36 +241,6 @@ namespace dxvk {
   }
 
 
-  HRESULT D3D11Buffer::GetDescFromD3D12(
-          ID3D12Resource*         pResource,
-    const D3D11_RESOURCE_FLAGS*   pResourceFlags,
-          D3D11_BUFFER_DESC*      pBufferDesc) {
-    D3D12_RESOURCE_DESC desc12 = pResource->GetDesc();
-
-    pBufferDesc->ByteWidth = desc12.Width;
-    pBufferDesc->Usage = D3D11_USAGE_DEFAULT;
-    pBufferDesc->BindFlags = D3D11_BIND_SHADER_RESOURCE;
-    pBufferDesc->MiscFlags = 0;
-    pBufferDesc->CPUAccessFlags = 0;
-    pBufferDesc->StructureByteStride = 0;
-
-    if (desc12.Flags & D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET)
-      pBufferDesc->BindFlags |= D3D11_BIND_RENDER_TARGET;
-
-    if (desc12.Flags & D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS)
-      pBufferDesc->BindFlags |= D3D11_BIND_UNORDERED_ACCESS;
-
-    if (pResourceFlags) {
-      pBufferDesc->BindFlags = pResourceFlags->BindFlags;
-      pBufferDesc->MiscFlags |= pResourceFlags->MiscFlags;
-      pBufferDesc->CPUAccessFlags = pResourceFlags->CPUAccessFlags;
-      pBufferDesc->StructureByteStride = pResourceFlags->StructureByteStride;
-    }
-
-    return S_OK;
-  }
-
-
   BOOL D3D11Buffer::CheckFormatFeatureSupport(
           VkFormat              Format,
           VkFormatFeatureFlags2 Features) const {
diff --git a/src/d3d11/d3d11_buffer.h b/src/d3d11/d3d11_buffer.h
index 097a8fcb..a169c440 100644
--- a/src/d3d11/d3d11_buffer.h
+++ b/src/d3d11/d3d11_buffer.h
@@ -7,7 +7,6 @@
 
 #include "d3d11_device_child.h"
 #include "d3d11_interfaces.h"
-#include "d3d11_on_12.h"
 #include "d3d11_resource.h"
 
 namespace dxvk {
@@ -42,9 +41,7 @@ namespace dxvk {
     
     D3D11Buffer(
             D3D11Device*                pDevice,
-      const D3D11_BUFFER_DESC*          pDesc,
-      const D3D11_ON_12_RESOURCE_INFO*  p11on12Info);
-
+      const D3D11_BUFFER_DESC*          pDesc);
     ~D3D11Buffer();
     
     HRESULT STDMETHODCALLTYPE QueryInterface(
@@ -145,14 +142,6 @@ namespace dxvk {
         : DxvkCsThread::SynchronizeAll;
     }
 
-    /**
-     * \brief Retrieves D3D11on12 resource info
-     * \returns 11on12 resource info
-     */
-    D3D11_ON_12_RESOURCE_INFO Get11on12Info() const {
-      return m_11on12;
-    }
-
     /**
      * \brief Normalizes buffer description
      * 
@@ -162,23 +151,9 @@ namespace dxvk {
     static HRESULT NormalizeBufferProperties(
             D3D11_BUFFER_DESC*      pDesc);
 
-    /**
-     * \brief Initializes D3D11 buffer description from D3D12
-     *
-     * \param [in] pResource D3D12 resource
-     * \param [in] pResourceFlags D3D11 flag overrides
-     * \param [out] pBufferDesc D3D11 buffer description
-     * \returns \c S_OK if the parameters are valid
-     */
-    static HRESULT GetDescFromD3D12(
-            ID3D12Resource*         pResource,
-      const D3D11_RESOURCE_FLAGS*   pResourceFlags,
-            D3D11_BUFFER_DESC*      pBufferDesc);
-
   private:
     
     D3D11_BUFFER_DESC             m_desc;
-    D3D11_ON_12_RESOURCE_INFO     m_11on12;
     D3D11_COMMON_BUFFER_MAP_MODE  m_mapMode;
     
     Rc<DxvkBuffer>                m_buffer;
diff --git a/src/d3d11/d3d11_context_imm.cpp b/src/d3d11/d3d11_context_imm.cpp
index 466e9a96..2c4816c7 100644
--- a/src/d3d11/d3d11_context_imm.cpp
+++ b/src/d3d11/d3d11_context_imm.cpp
@@ -753,74 +753,6 @@ namespace dxvk {
   }
 
 
-  void D3D11ImmediateContext::Acquire11on12Resource(
-          ID3D11Resource*             pResource,
-          VkImageLayout               SrcLayout) {
-    D3D10DeviceLock lock = LockContext();
-
-    auto texture = GetCommonTexture(pResource);
-    auto buffer = GetCommonBuffer(pResource);
-
-    if (buffer) {
-      EmitCs([
-        cBuffer   = buffer->GetBuffer()
-      ] (DxvkContext* ctx) {
-        ctx->emitBufferBarrier(cBuffer,
-          VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
-          VK_ACCESS_MEMORY_WRITE_BIT | VK_ACCESS_MEMORY_READ_BIT,
-          cBuffer->info().stages,
-          cBuffer->info().access);
-      });
-    } else if (texture) {
-      EmitCs([
-        cImage    = texture->GetImage(),
-        cLayout   = SrcLayout
-      ] (DxvkContext* ctx) {
-        ctx->emitImageBarrier(cImage, cLayout,
-          VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
-          VK_ACCESS_MEMORY_WRITE_BIT | VK_ACCESS_MEMORY_READ_BIT,
-          cImage->info().layout,
-          cImage->info().stages,
-          cImage->info().access);
-      });
-    }
-  }
-
-
-  void D3D11ImmediateContext::Release11on12Resource(
-          ID3D11Resource*             pResource,
-          VkImageLayout               DstLayout) {
-    D3D10DeviceLock lock = LockContext();
-
-    auto texture = GetCommonTexture(pResource);
-    auto buffer = GetCommonBuffer(pResource);
-
-    if (buffer) {
-      EmitCs([
-        cBuffer   = buffer->GetBuffer()
-      ] (DxvkContext* ctx) {
-        ctx->emitBufferBarrier(cBuffer,
-          cBuffer->info().stages,
-          cBuffer->info().access,
-          VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
-          VK_ACCESS_MEMORY_WRITE_BIT | VK_ACCESS_MEMORY_READ_BIT);
-      });
-    } else if (texture) {
-      EmitCs([
-        cImage    = texture->GetImage(),
-        cLayout   = DstLayout
-      ] (DxvkContext* ctx) {
-        ctx->emitImageBarrier(cImage,
-          cImage->info().layout,
-          cImage->info().stages,
-          cImage->info().access,
-          cLayout, VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
-          VK_ACCESS_MEMORY_WRITE_BIT | VK_ACCESS_MEMORY_READ_BIT);
-      });
-    }
-  }
-
-
   void D3D11ImmediateContext::SynchronizeCsThread(uint64_t SequenceNumber) {
     D3D10DeviceLock lock = LockContext();
 
diff --git a/src/d3d11/d3d11_context_imm.h b/src/d3d11/d3d11_context_imm.h
index b1fa34eb..5889141d 100644
--- a/src/d3d11/d3d11_context_imm.h
+++ b/src/d3d11/d3d11_context_imm.h
@@ -77,14 +77,6 @@ namespace dxvk {
             ID3DDeviceContextState*           pState,
             ID3DDeviceContextState**          ppPreviousState);
 
-    void Acquire11on12Resource(
-            ID3D11Resource*             pResource,
-            VkImageLayout               SrcLayout);
-
-    void Release11on12Resource(
-            ID3D11Resource*             pResource,
-            VkImageLayout               DstLayout);
-
     void SynchronizeCsThread(
             uint64_t                          SequenceNumber);
 
diff --git a/src/d3d11/d3d11_device.cpp b/src/d3d11/d3d11_device.cpp
index bc107eff..40988c48 100644
--- a/src/d3d11/d3d11_device.cpp
+++ b/src/d3d11/d3d11_device.cpp
@@ -100,7 +100,7 @@ namespace dxvk {
       return S_FALSE;
     
     try {
-      const Com<D3D11Buffer> buffer = new D3D11Buffer(this, &desc, nullptr);
+      const Com<D3D11Buffer> buffer = new D3D11Buffer(this, &desc);
 
       if (!(desc.MiscFlags & D3D11_RESOURCE_MISC_TILE_POOL))
         m_initializer->InitBuffer(buffer.ptr(), pInitialData);
@@ -149,7 +149,7 @@ namespace dxvk {
       return S_FALSE;
     
     try {
-      const Com<D3D11Texture1D> texture = new D3D11Texture1D(this, &desc, nullptr);
+      const Com<D3D11Texture1D> texture = new D3D11Texture1D(this, &desc);
       m_initializer->InitTexture(texture->GetCommonTexture(), pInitialData);
       *ppTexture1D = texture.ref();
       return S_OK;
@@ -229,7 +229,7 @@ namespace dxvk {
       return S_FALSE;
     
     try {
-      Com<D3D11Texture2D> texture = new D3D11Texture2D(this, &desc, nullptr, nullptr);
+      Com<D3D11Texture2D> texture = new D3D11Texture2D(this, &desc, nullptr);
       m_initializer->InitTexture(texture->GetCommonTexture(), pInitialData);
       *ppTexture2D = texture.ref();
       return S_OK;
@@ -308,7 +308,7 @@ namespace dxvk {
       return S_FALSE;
       
     try {
-      Com<D3D11Texture3D> texture = new D3D11Texture3D(this, &desc, nullptr);
+      Com<D3D11Texture3D> texture = new D3D11Texture3D(this, &desc);
       m_initializer->InitTexture(texture->GetCommonTexture(), pInitialData);
       *ppTexture3D = texture.ref();
       return S_OK;
@@ -1832,11 +1832,6 @@ namespace dxvk {
           DXGI_VK_FORMAT_MODE   Mode) const {
     return m_d3d11Formats.GetFormatFamily(Format, Mode);
   }
-
-
-  bool D3D11Device::Is11on12Device() const {
-    return m_container->Is11on12Device();
-  }
   
   
   void D3D11Device::FlushInitContext() {
@@ -2312,7 +2307,7 @@ namespace dxvk {
 
     // Only 2D textures may be shared
     try {
-      const Com<D3D11Texture2D> texture = new D3D11Texture2D(this, &d3d11Desc, nullptr, hResource);
+      const Com<D3D11Texture2D> texture = new D3D11Texture2D(this, &d3d11Desc, hResource);
       texture->QueryInterface(ReturnedInterface, ppResource);
       return S_OK;
     }
@@ -3067,22 +3062,18 @@ namespace dxvk {
 
   D3D11DXGIDevice::D3D11DXGIDevice(
           IDXGIAdapter*       pAdapter,
-          ID3D12Device*       pD3D12Device,
-          ID3D12CommandQueue* pD3D12Queue,
-          Rc<DxvkInstance>    pDxvkInstance,
-          Rc<DxvkAdapter>     pDxvkAdapter,
-          Rc<DxvkDevice>      pDxvkDevice,
+    const Rc<DxvkInstance>&   pDxvkInstance,
+    const Rc<DxvkAdapter>&    pDxvkAdapter,
           D3D_FEATURE_LEVEL   FeatureLevel,
           UINT                FeatureFlags)
   : m_dxgiAdapter   (pAdapter),
     m_dxvkInstance  (pDxvkInstance),
     m_dxvkAdapter   (pDxvkAdapter),
-    m_dxvkDevice    (pDxvkDevice),
+    m_dxvkDevice    (CreateDevice(FeatureLevel)),
     m_d3d11Device   (this, FeatureLevel, FeatureFlags),
     m_d3d11DeviceExt(this, &m_d3d11Device),
     m_d3d11Interop  (this, &m_d3d11Device),
     m_d3d11Video    (this, &m_d3d11Device),
-    m_d3d11on12     (this, &m_d3d11Device, pD3D12Device, pD3D12Queue),
     m_metaDevice    (this),
     m_dxvkFactory   (this, &m_d3d11Device) {
 
@@ -3090,7 +3081,7 @@ namespace dxvk {
   
   
   D3D11DXGIDevice::~D3D11DXGIDevice() {
-
+    
   }
   
   
@@ -3154,13 +3145,6 @@ namespace dxvk {
       return S_OK;
     }
 
-    if (m_d3d11on12.Is11on12Device()) {
-      if (riid == __uuidof(ID3D11On12Device)) {
-        *ppvObject = ref(&m_d3d11on12);
-        return S_OK;
-      }
-    }
-
     if (riid == __uuidof(ID3D10Multithread)) {
       Com<ID3D11DeviceContext> context;
       m_d3d11Device.GetImmediateContext(&context);
@@ -3424,4 +3408,10 @@ namespace dxvk {
     return m_dxvkDevice;
   }
 
+
+  Rc<DxvkDevice> D3D11DXGIDevice::CreateDevice(D3D_FEATURE_LEVEL FeatureLevel) {
+    DxvkDeviceFeatures deviceFeatures = D3D11Device::GetDeviceFeatures(m_dxvkAdapter);
+    return m_dxvkAdapter->createDevice(m_dxvkInstance, deviceFeatures);
+  }
+
 }
diff --git a/src/d3d11/d3d11_device.h b/src/d3d11/d3d11_device.h
index 7a44b5ad..b7d9d99b 100644
--- a/src/d3d11/d3d11_device.h
+++ b/src/d3d11/d3d11_device.h
@@ -20,7 +20,6 @@
 #include "d3d11_initializer.h"
 #include "d3d11_interfaces.h"
 #include "d3d11_interop.h"
-#include "d3d11_on_12.h"
 #include "d3d11_options.h"
 #include "d3d11_shader.h"
 #include "d3d11_state.h"
@@ -425,9 +424,7 @@ namespace dxvk {
     D3D11ImmediateContext* GetContext() const {
       return m_context.ptr();
     }
-
-    bool Is11on12Device() const;
-
+    
     static D3D_FEATURE_LEVEL GetMaxFeatureLevel(
       const Rc<DxvkInstance>& Instance,
       const Rc<DxvkAdapter>&  Adapter);
@@ -437,7 +434,7 @@ namespace dxvk {
     
   private:
     
-    D3D11DXGIDevice*                m_container;
+    IDXGIObject*                    m_container;
 
     D3D_FEATURE_LEVEL               m_featureLevel;
     UINT                            m_featureFlags;
@@ -771,11 +768,8 @@ namespace dxvk {
     
     D3D11DXGIDevice(
             IDXGIAdapter*       pAdapter,
-            ID3D12Device*       pD3D12Device,
-            ID3D12CommandQueue* pD3D12Queue,
-            Rc<DxvkInstance>    pDxvkInstance,
-            Rc<DxvkAdapter>     pDxvkAdapter,
-            Rc<DxvkDevice>      pDxvkDevice,
+      const Rc<DxvkInstance>&   pDxvkInstance,
+      const Rc<DxvkAdapter>&    pDxvkAdapter,
             D3D_FEATURE_LEVEL   FeatureLevel,
             UINT                FeatureFlags);
     
@@ -844,10 +838,6 @@ namespace dxvk {
     
     Rc<DxvkDevice> STDMETHODCALLTYPE GetDXVKDevice();
 
-    BOOL Is11on12Device() const {
-      return m_d3d11on12.Is11on12Device();
-    }
-
   private:
 
     Com<IDXGIAdapter>   m_dxgiAdapter;
@@ -860,13 +850,14 @@ namespace dxvk {
     D3D11DeviceExt      m_d3d11DeviceExt;
     D3D11VkInterop      m_d3d11Interop;
     D3D11VideoDevice    m_d3d11Video;
-    D3D11on12Device     m_d3d11on12;
     DXGIDXVKDevice      m_metaDevice;
     
     DXGIVkSwapChainFactory   m_dxvkFactory;
     
     uint32_t m_frameLatency = DefaultFrameLatency;
 
+    Rc<DxvkDevice> CreateDevice(D3D_FEATURE_LEVEL FeatureLevel);
+
   };
   
 }
diff --git a/src/d3d11/d3d11_main.cpp b/src/d3d11/d3d11_main.cpp
index 0c0aad66..36537539 100644
--- a/src/d3d11/d3d11_main.cpp
+++ b/src/d3d11/d3d11_main.cpp
@@ -89,13 +89,8 @@ extern "C" {
     try {
       Logger::info(str::format("D3D11CoreCreateDevice: Using feature level ", devFeatureLevel));
 
-      DxvkDeviceFeatures deviceFeatures = D3D11Device::GetDeviceFeatures(dxvkAdapter);
-      Rc<DxvkDevice> dxvkDevice = dxvkAdapter->createDevice(dxvkInstance, deviceFeatures);
-
       Com<D3D11DXGIDevice> device = new D3D11DXGIDevice(
-        pAdapter, nullptr, nullptr,
-        dxvkInstance, dxvkAdapter, dxvkDevice,
-        devFeatureLevel, Flags);
+        pAdapter, dxvkInstance, dxvkAdapter, devFeatureLevel, Flags);
 
       return device->QueryInterface(
         __uuidof(ID3D11Device),
@@ -263,169 +258,12 @@ extern "C" {
           ID3D11Device**        ppDevice,
           ID3D11DeviceContext** ppImmediateContext,
           D3D_FEATURE_LEVEL*    pChosenFeatureLevel) {
-    InitReturnPtr(ppDevice);
-    InitReturnPtr(ppImmediateContext);
-
-    if (pChosenFeatureLevel)
-      *pChosenFeatureLevel = D3D_FEATURE_LEVEL(0);
-
-    if (!pDevice)
-      return E_INVALIDARG;
-
-    // Figure out D3D12 objects
-    Com<ID3D12Device> d3d12Device;
-    Com<ID3D12CommandQueue> d3d12Queue;
-
-    if (FAILED(pDevice->QueryInterface(__uuidof(ID3D12Device), reinterpret_cast<void**>(&d3d12Device)))) {
-      Logger::err("D3D11On12CreateDevice: Device is not a valid D3D12 device");
-      return E_INVALIDARG;
-    }
-
-    if (NodeMask & (NodeMask - 1)) {
-      Logger::err("D3D11On12CreateDevice: Invalid node mask");
-      return E_INVALIDARG;
-    }
-
-    if (!NumQueues || !ppCommandQueues || !ppCommandQueues[0]) {
-      Logger::err("D3D11On12CreateDevice: No command queue specified");
-      return E_INVALIDARG;
-    }
-
-    if (NumQueues > 1) {
-      // Not sure what to do with more than one graphics queue
-      Logger::warn("D3D11On12CreateDevice: Only one queue supported");
-    }
-
-    if (FAILED(ppCommandQueues[0]->QueryInterface(__uuidof(ID3D12CommandQueue), reinterpret_cast<void**>(&d3d12Queue)))) {
-      Logger::err("D3D11On12CreateDevice: Queue is not a valid D3D12 command queue");
-      return E_INVALIDARG;
-    }
-
-    // Determine feature level for the D3D11 device
-    std::array<D3D_FEATURE_LEVEL, 4> defaultFeatureLevels = {{
-      D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_11_1,
-      D3D_FEATURE_LEVEL_12_0, D3D_FEATURE_LEVEL_12_1,
-    }};
-
-    D3D12_FEATURE_DATA_FEATURE_LEVELS featureLevel = { };
-
-    if (!FeatureLevels || !pFeatureLevels) {
-      featureLevel.NumFeatureLevels = defaultFeatureLevels.size();
-      featureLevel.pFeatureLevelsRequested = defaultFeatureLevels.data();
-    } else {
-      featureLevel.NumFeatureLevels = FeatureLevels;
-      featureLevel.pFeatureLevelsRequested = pFeatureLevels;
-    }
-
-    HRESULT hr = d3d12Device->CheckFeatureSupport(D3D12_FEATURE_FEATURE_LEVELS, &featureLevel, sizeof(featureLevel));
-
-    if (FAILED(hr) || !featureLevel.MaxSupportedFeatureLevel) {
-      Logger::err(str::format("D3D11On12CreateDevice: Minimum required feature level not supported"));
-      return hr;
-    }
-
-    Logger::info(str::format("D3D11On12CreateDevice: Chosen feature level: ", featureLevel.MaxSupportedFeatureLevel));
-
-    Com<ID3D12DXVKInteropDevice> interopDevice;
-
-    if (FAILED(d3d12Device->QueryInterface(__uuidof(ID3D12DXVKInteropDevice), reinterpret_cast<void**>(&interopDevice)))) {
-      Logger::err("D3D11On12CreateDevice: Device not a vkd3d-proton device.");
-      return E_INVALIDARG;
-    }
+    static bool s_errorShown = false;
 
-    Com<IDXGIAdapter> dxgiAdapter;
+    if (!std::exchange(s_errorShown, true))
+      Logger::err("D3D11On12CreateDevice: Not implemented");
 
-    if (FAILED(interopDevice->GetDXGIAdapter(IID_PPV_ARGS(&dxgiAdapter)))) {
-      Logger::err("D3D11On12CreateDevice: Failed to query DXGI adapter.");
-      return E_INVALIDARG;
-    }
-
-    try {
-      // Initialize DXVK instance
-      DxvkInstanceImportInfo instanceInfo = { };
-      DxvkDeviceImportInfo deviceInfo = { };
-      VkPhysicalDevice vulkanAdapter = VK_NULL_HANDLE;
-
-      interopDevice->GetVulkanHandles(&instanceInfo.instance, &vulkanAdapter, &deviceInfo.device);
-
-      uint32_t instanceExtensionCount = 0;
-      interopDevice->GetInstanceExtensions(&instanceExtensionCount, nullptr);
-
-      std::vector<const char*> instanceExtensions(instanceExtensionCount);
-      interopDevice->GetInstanceExtensions(&instanceExtensionCount, instanceExtensions.data());
-
-      instanceInfo.extensionCount = instanceExtensions.size();
-      instanceInfo.extensionNames = instanceExtensions.data();
-
-      Rc<DxvkInstance> dxvkInstance = new DxvkInstance(instanceInfo);
-
-      // Find adapter by physical device handle
-      Rc<DxvkAdapter> dxvkAdapter;
-
-      for (uint32_t i = 0; i < dxvkInstance->adapterCount(); i++) {
-        Rc<DxvkAdapter> curr = dxvkInstance->enumAdapters(i);
-
-        if (curr->handle() == vulkanAdapter)
-          dxvkAdapter = std::move(curr);
-      }
-
-      if (dxvkAdapter == nullptr) {
-        Logger::err("D3D11On12CreateDevice: No matching adapter found");
-        return E_INVALIDARG;
-      }
-
-      interopDevice->GetVulkanQueueInfo(d3d12Queue.ptr(), &deviceInfo.queue, &deviceInfo.queueFamily);
-      interopDevice->GetDeviceFeatures(&deviceInfo.features);
-
-      uint32_t deviceExtensionCount = 0;
-      interopDevice->GetDeviceExtensions(&deviceExtensionCount, nullptr);
-
-      std::vector<const char*> deviceExtensions(deviceExtensionCount);
-      interopDevice->GetDeviceExtensions(&deviceExtensionCount, deviceExtensions.data());
-
-      deviceInfo.extensionCount = deviceExtensions.size();
-      deviceInfo.extensionNames = deviceExtensions.data();
-
-      deviceInfo.queueCallback = [
-        cDevice = interopDevice,
-        cQueue = d3d12Queue
-      ] (bool doLock) {
-        HRESULT hr = doLock
-          ? cDevice->LockCommandQueue(cQueue.ptr())
-          : cDevice->UnlockCommandQueue(cQueue.ptr());
-
-        if (FAILED(hr))
-          Logger::err(str::format("Failed to lock vkd3d-proton device queue: ", hr));
-      };
-
-      Rc<DxvkDevice> dxvkDevice = dxvkAdapter->importDevice(dxvkInstance, deviceInfo);
-
-      // Create and return the actual D3D11 device
-      Com<D3D11DXGIDevice> device = new D3D11DXGIDevice(
-        dxgiAdapter.ptr(), d3d12Device.ptr(), d3d12Queue.ptr(),
-        dxvkInstance, dxvkAdapter, dxvkDevice,
-        featureLevel.MaxSupportedFeatureLevel, Flags);
-
-      Com<ID3D11Device> d3d11Device;
-      device->QueryInterface(__uuidof(ID3D11Device), reinterpret_cast<void**>(&d3d11Device));
-
-      if (ppDevice)
-        *ppDevice = d3d11Device.ref();
-
-      if (ppImmediateContext)
-        d3d11Device->GetImmediateContext(ppImmediateContext);
-
-      if (pChosenFeatureLevel)
-        *pChosenFeatureLevel = d3d11Device->GetFeatureLevel();
-
-      if (!ppDevice && !ppImmediateContext)
-        return S_FALSE;
-
-      return S_OK;
-    } catch (const DxvkError& e) {
-      Logger::err("D3D11On12CreateDevice: Failed to create D3D11 device");
-      return E_FAIL;
-    }
+    return E_NOTIMPL;
   }
 
 }
\ No newline at end of file
diff --git a/src/d3d11/d3d11_on_12.cpp b/src/d3d11/d3d11_on_12.cpp
deleted file mode 100644
index 7393021c..00000000
--- a/src/d3d11/d3d11_on_12.cpp
+++ /dev/null
@@ -1,150 +0,0 @@
-#include "d3d11_context_imm.h"
-#include "d3d11_device.h"
-#include "d3d11_on_12.h"
-
-namespace dxvk {
-
-  D3D11on12Device::D3D11on12Device(
-          D3D11DXGIDevice*        pContainer,
-          D3D11Device*            pDevice,
-          ID3D12Device*           pD3D12Device,
-          ID3D12CommandQueue*     pD3D12Queue)
-  : m_container   (pContainer),
-    m_device      (pDevice),
-    m_d3d12Device (pD3D12Device),
-    m_d3d12Queue  (pD3D12Queue) {
-
-  }
-
-
-  D3D11on12Device::~D3D11on12Device() {
-
-  }
-
-
-  ULONG STDMETHODCALLTYPE D3D11on12Device::AddRef() {
-    return m_container->AddRef();
-  }
-  
-
-  ULONG STDMETHODCALLTYPE D3D11on12Device::Release() {
-    return m_container->Release();
-  }
-  
-
-  HRESULT STDMETHODCALLTYPE D3D11on12Device::QueryInterface(
-          REFIID                  riid,
-          void**                  ppvObject) {
-    return m_container->QueryInterface(riid, ppvObject);
-  }
-
-
-  HRESULT STDMETHODCALLTYPE D3D11on12Device::CreateWrappedResource(
-          IUnknown*               pResource12,
-    const D3D11_RESOURCE_FLAGS*   pResourceFlags,
-          D3D12_RESOURCE_STATES   InputState,
-          D3D12_RESOURCE_STATES   OutputState,
-          REFIID                  riid,
-          void**                  ppResource11) {
-    Com<ID3D12DXVKInteropDevice> interopDevice;
-    m_d3d12Device->QueryInterface(__uuidof(ID3D12DXVKInteropDevice), reinterpret_cast<void**>(&interopDevice));
-
-    D3D11_ON_12_RESOURCE_INFO info = { };
-    info.InputState = InputState;
-    info.OutputState = OutputState;
-    info.IsWrappedResource = TRUE;
-
-    // 11on12 technically allows importing D3D12 heaps as tile pools,
-    // but we don't support importing sparse resources at this time.
-    if (FAILED(pResource12->QueryInterface(__uuidof(ID3D12Resource), reinterpret_cast<void**>(&info.Resource)))) {
-      Logger::err("D3D11on12Device::CreateWrappedResource: Resource not a valid D3D12 resource");
-      return E_INVALIDARG;
-    }
-
-    // Query Vulkan resource handle and buffer offset as necessary
-    if (FAILED(interopDevice->GetVulkanResourceInfo(info.Resource.ptr(), &info.VulkanHandle, &info.VulkanOffset))) {
-      Logger::err("D3D11on12Device::CreateWrappedResource: Failed to retrieve Vulkan resource info");
-      return E_INVALIDARG;
-    }
-
-    Com<ID3D11Resource> resource;
-    D3D12_RESOURCE_DESC desc = info.Resource->GetDesc();
-
-    if (desc.Dimension == D3D12_RESOURCE_DIMENSION_BUFFER) {
-      D3D11_BUFFER_DESC bufferDesc;
-
-      if (FAILED(D3D11Buffer::GetDescFromD3D12(info.Resource.ptr(), pResourceFlags, &bufferDesc)))
-        return E_INVALIDARG;
-
-      resource = new D3D11Buffer(m_device, &bufferDesc, &info);
-    } else {
-      D3D11_COMMON_TEXTURE_DESC textureDesc;
-
-      if (FAILED(D3D11CommonTexture::GetDescFromD3D12(info.Resource.ptr(), pResourceFlags, &textureDesc)))
-        return E_INVALIDARG;
-
-      switch (desc.Dimension) {
-        case D3D12_RESOURCE_DIMENSION_TEXTURE1D:
-          resource = new D3D11Texture1D(m_device, &textureDesc, &info);
-          break;
-
-        case D3D12_RESOURCE_DIMENSION_TEXTURE2D:
-          resource = new D3D11Texture2D(m_device, &textureDesc, &info, nullptr);
-          break;
-
-        case D3D12_RESOURCE_DIMENSION_TEXTURE3D:
-          resource = new D3D11Texture3D(m_device, &textureDesc, &info);
-          break;
-
-        default:
-          Logger::err("D3D11on12Device::CreateWrappedResource: Unhandled resource dimension");
-          return E_INVALIDARG;
-      }
-    }
-
-    return resource->QueryInterface(riid, ppResource11);
-  }
-
-
-  void STDMETHODCALLTYPE D3D11on12Device::ReleaseWrappedResources(
-          ID3D11Resource* const*  ppResources,
-          UINT                    ResourceCount) {
-    Com<ID3D12DXVKInteropDevice> interopDevice;
-    m_d3d12Device->QueryInterface(__uuidof(ID3D12DXVKInteropDevice), reinterpret_cast<void**>(&interopDevice));
-
-    for (uint32_t i = 0; i < ResourceCount; i++) {
-      D3D11_ON_12_RESOURCE_INFO info;
-
-      if (FAILED(GetResource11on12Info(ppResources[i], &info)) || !info.IsWrappedResource) {
-        Logger::warn("D3D11on12Device::ReleaseWrappedResources: Resource not a wrapped resource, skipping");
-        continue;
-      }
-
-      VkImageLayout layout = VK_IMAGE_LAYOUT_UNDEFINED;
-      interopDevice->GetVulkanImageLayout(info.Resource.ptr(), info.OutputState, &layout);
-      m_device->GetContext()->Release11on12Resource(ppResources[i], layout);
-    }
-  }
-
-
-  void STDMETHODCALLTYPE D3D11on12Device::AcquireWrappedResources(
-          ID3D11Resource* const*  ppResources,
-          UINT                    ResourceCount) {
-    Com<ID3D12DXVKInteropDevice> interopDevice;
-    m_d3d12Device->QueryInterface(__uuidof(ID3D12DXVKInteropDevice), reinterpret_cast<void**>(&interopDevice));
-
-    for (uint32_t i = 0; i < ResourceCount; i++) {
-      D3D11_ON_12_RESOURCE_INFO info;
-
-      if (FAILED(GetResource11on12Info(ppResources[i], &info)) || !info.IsWrappedResource) {
-        Logger::warn("D3D11on12Device::AcquireWrappedResources: Resource not a wrapped resource, skipping");
-        continue;
-      }
-
-      VkImageLayout layout = VK_IMAGE_LAYOUT_UNDEFINED;
-      interopDevice->GetVulkanImageLayout(info.Resource.ptr(), info.InputState, &layout);
-      m_device->GetContext()->Acquire11on12Resource(ppResources[i], layout);
-    }
-  }
-
-}
diff --git a/src/d3d11/d3d11_on_12.h b/src/d3d11/d3d11_on_12.h
deleted file mode 100644
index 9620662b..00000000
--- a/src/d3d11/d3d11_on_12.h
+++ /dev/null
@@ -1,75 +0,0 @@
-#pragma once
-
-#include "d3d11_on_12_interfaces.h"
-
-#include "../util/log/log.h"
-
-namespace dxvk {
-
-  class D3D11Device;
-  class D3D11DXGIDevice;
-
-  /**
-   * \brief Resource info for 11on12 resources
-   */
-  struct D3D11_ON_12_RESOURCE_INFO {
-    Com<ID3D12Resource> Resource;
-    UINT64 VulkanHandle = 0;
-    UINT64 VulkanOffset = 0;
-    BOOL IsWrappedResource = FALSE;
-    D3D12_RESOURCE_STATES InputState = D3D12_RESOURCE_STATE_COMMON;
-    D3D12_RESOURCE_STATES OutputState = D3D12_RESOURCE_STATE_COMMON;
-  };
-
-
-  class D3D11on12Device : public ID3D11On12Device {
-
-  public:
-
-    D3D11on12Device(
-            D3D11DXGIDevice*        pContainer,
-            D3D11Device*            pDevice,
-            ID3D12Device*           pD3D12Device,
-            ID3D12CommandQueue*     pD3D12Queue);
-
-    ~D3D11on12Device();
-
-    ULONG STDMETHODCALLTYPE AddRef();
-    
-    ULONG STDMETHODCALLTYPE Release();
-    
-    HRESULT STDMETHODCALLTYPE QueryInterface(
-            REFIID                  riid,
-            void**                  ppvObject);
-
-    HRESULT STDMETHODCALLTYPE CreateWrappedResource(
-            IUnknown*               pResource12,
-      const D3D11_RESOURCE_FLAGS*   pResourceFlags,
-            D3D12_RESOURCE_STATES   InputState,
-            D3D12_RESOURCE_STATES   OutputState,
-            REFIID                  riid,
-            void**                  ppResource11);
-
-    void STDMETHODCALLTYPE ReleaseWrappedResources(
-            ID3D11Resource* const*  ppResources,
-            UINT                    ResourceCount);
-
-    void STDMETHODCALLTYPE AcquireWrappedResources(
-            ID3D11Resource* const*  ppResources,
-            UINT                    ResourceCount);
-
-    bool Is11on12Device() const {
-      return m_d3d12Device != nullptr;
-    }
-
-  private:
-
-    D3D11DXGIDevice*        m_container;
-    D3D11Device*            m_device;
-
-    Com<ID3D12Device>       m_d3d12Device;
-    Com<ID3D12CommandQueue> m_d3d12Queue;
-
-  };
-
-}
diff --git a/src/d3d11/d3d11_on_12_interfaces.h b/src/d3d11/d3d11_on_12_interfaces.h
deleted file mode 100644
index 2ec22e0a..00000000
--- a/src/d3d11/d3d11_on_12_interfaces.h
+++ /dev/null
@@ -1,56 +0,0 @@
-#pragma once
-
-#include "../vulkan/vulkan_loader.h"
-
-#include <d3d11on12.h>
-
-MIDL_INTERFACE("39da4e09-bd1c-4198-9fae-86bbe3be41fd")
-ID3D12DXVKInteropDevice : public IUnknown {
-  virtual HRESULT STDMETHODCALLTYPE GetDXGIAdapter(
-          REFIID                      iid,
-          void**                      ppvObject) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE GetInstanceExtensions(
-          UINT*                       pExtensionCount,
-    const char**                      ppExtensions) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE GetDeviceExtensions(
-          UINT*                       pExtensionCount,
-    const char**                      ppExtensions) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE GetDeviceFeatures(
-    const VkPhysicalDeviceFeatures2** ppFeatures) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE GetVulkanHandles(
-          VkInstance*                 pVkInstance,
-          VkPhysicalDevice*           pVkPhysicalDevice,
-          VkDevice*                   pVkDevice) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE GetVulkanQueueInfo(
-          ID3D12CommandQueue*         pCommandQueue,
-          VkQueue*                    pVkQueue,
-          UINT32*                     pVkQueueFamily) = 0;
-
-  virtual void STDMETHODCALLTYPE GetVulkanImageLayout(
-          ID3D12Resource*             pResource,
-          D3D12_RESOURCE_STATES       State,
-          VkImageLayout*              pVkLayout) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE GetVulkanResourceInfo(
-          ID3D12Resource*             pResource,
-          UINT64*                     pVkHandle,
-          UINT64*                     pBufferOffset) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE LockCommandQueue(
-          ID3D12CommandQueue*         pCommandQueue) = 0;
-
-  virtual HRESULT STDMETHODCALLTYPE UnlockCommandQueue(
-          ID3D12CommandQueue*         pCommandQueue) = 0;
-
-};
-
-#ifdef _MSC_VER
-struct __declspec(uuid("39da4e09-bd1c-4198-9fae-86bbe3be41fd")) ID3D12DXVKInteropDevice;
-#else
-__CRT_UUID_DECL(ID3D12DXVKInteropDevice, 0x39da4e09, 0xbd1c, 0x4198, 0x9f,0xae, 0x86,0xbb,0xe3,0xbe,0x41,0xfd)
-#endif
diff --git a/src/d3d11/d3d11_resource.cpp b/src/d3d11/d3d11_resource.cpp
index cf3adfbf..43dac598 100644
--- a/src/d3d11/d3d11_resource.cpp
+++ b/src/d3d11/d3d11_resource.cpp
@@ -172,26 +172,6 @@ namespace dxvk {
   }
   
 
-  HRESULT GetResource11on12Info(
-          ID3D11Resource*             pResource,
-          D3D11_ON_12_RESOURCE_INFO*  p11on12Info) {
-    auto buffer   = GetCommonBuffer (pResource);
-    auto texture  = GetCommonTexture(pResource);
-
-    if (buffer != nullptr)
-      *p11on12Info = buffer->Get11on12Info();
-    else if (texture != nullptr)
-      *p11on12Info = texture->Get11on12Info();
-    else
-      return E_INVALIDARG;
-
-    if (p11on12Info->Resource == nullptr)
-      return E_INVALIDARG;
-
-    return S_OK;
-  }
-
-
   HRESULT GetCommonResourceDesc(
           ID3D11Resource*             pResource,
           D3D11_COMMON_RESOURCE_DESC* pDesc) {
diff --git a/src/d3d11/d3d11_resource.h b/src/d3d11/d3d11_resource.h
index db45a96c..4baabd10 100644
--- a/src/d3d11/d3d11_resource.h
+++ b/src/d3d11/d3d11_resource.h
@@ -93,17 +93,6 @@ namespace dxvk {
   };
 
 
-  /**
-   * \brief Queries D3D11on12 resource info
-   *
-   * \param [in] pResource The resource to query
-   * \param [out] p11on12Info 11on12 info
-   * \returns \c S_OK on success, or \c E_INVALIDARG
-   */
-  HRESULT GetResource11on12Info(
-          ID3D11Resource*             pResource,
-          D3D11_ON_12_RESOURCE_INFO*  p11on12Info);
-
   /**
    * \brief Queries common resource description
    * 
diff --git a/src/d3d11/d3d11_swapchain.cpp b/src/d3d11/d3d11_swapchain.cpp
index fdfc1de6..53690614 100644
--- a/src/d3d11/d3d11_swapchain.cpp
+++ b/src/d3d11/d3d11_swapchain.cpp
@@ -551,8 +551,7 @@ namespace dxvk {
       VkImage imageHandle = m_presenter->getImage(i).image;
       
       Rc<DxvkImage> image = new DxvkImage(
-        m_device.ptr(), imageInfo, imageHandle,
-        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
+        m_device.ptr(), imageInfo, imageHandle);
 
       m_imageViews[i] = new DxvkImageView(
         m_device->vkd(), image, viewInfo);
diff --git a/src/d3d11/d3d11_texture.cpp b/src/d3d11/d3d11_texture.cpp
index b6f7d92a..15579edd 100644
--- a/src/d3d11/d3d11_texture.cpp
+++ b/src/d3d11/d3d11_texture.cpp
@@ -11,13 +11,11 @@ namespace dxvk {
           ID3D11Resource*             pInterface,
           D3D11Device*                pDevice,
     const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-    const D3D11_ON_12_RESOURCE_INFO*  p11on12Info,
           D3D11_RESOURCE_DIMENSION    Dimension,
           DXGI_USAGE                  DxgiUsage,
           VkImage                     vkImage,
           HANDLE                      hSharedHandle)
-  : m_interface(pInterface), m_device(pDevice), m_dimension(Dimension), m_desc(*pDesc),
-    m_11on12(p11on12Info ? *p11on12Info : D3D11_ON_12_RESOURCE_INFO()), m_dxgiUsage(DxgiUsage) {
+  : m_interface(pInterface), m_device(pDevice), m_dimension(Dimension), m_desc(*pDesc), m_dxgiUsage(DxgiUsage) {
     DXGI_VK_FORMAT_MODE   formatMode   = GetFormatMode();
     DXGI_VK_FORMAT_INFO   formatInfo   = m_device->LookupFormat(m_desc.Format, formatMode);
     DXGI_VK_FORMAT_FAMILY formatFamily = m_device->LookupFamily(m_desc.Format, formatMode);
@@ -230,13 +228,10 @@ namespace dxvk {
     if (m_mapMode == D3D11_COMMON_TEXTURE_MAP_MODE_DIRECT)
       memoryProperties = GetMemoryFlags();
     
-    if (m_11on12.Resource != nullptr)
-      vkImage = VkImage(m_11on12.VulkanHandle);
-
-    if (!vkImage)
+    if (vkImage == VK_NULL_HANDLE)
       m_image = m_device->GetDXVKDevice()->createImage(imageInfo, memoryProperties);
     else
-      m_image = m_device->GetDXVKDevice()->importImage(imageInfo, vkImage, memoryProperties);
+      m_image = m_device->GetDXVKDevice()->createImageFromVkImage(imageInfo, vkImage);
 
     if (imageInfo.sharing.mode == DxvkSharedHandleMode::Export)
       ExportImageInfo();
@@ -474,60 +469,9 @@ namespace dxvk {
   }
   
   
-  HRESULT D3D11CommonTexture::GetDescFromD3D12(
-          ID3D12Resource*         pResource,
-    const D3D11_RESOURCE_FLAGS*   pResourceFlags,
-          D3D11_COMMON_TEXTURE_DESC* pTextureDesc) {
-    D3D12_RESOURCE_DESC desc12 = pResource->GetDesc();
-
-    pTextureDesc->Width = desc12.Width;
-    pTextureDesc->Height = desc12.Height;
-
-    if (desc12.Dimension == D3D12_RESOURCE_DIMENSION_TEXTURE3D) {
-      pTextureDesc->Depth = desc12.DepthOrArraySize;
-      pTextureDesc->ArraySize = 1;
-    } else {
-      pTextureDesc->Depth = 1;
-      pTextureDesc->ArraySize = desc12.DepthOrArraySize;
-    }
-
-    pTextureDesc->MipLevels = desc12.MipLevels;
-    pTextureDesc->Format = desc12.Format;
-    pTextureDesc->SampleDesc = desc12.SampleDesc;
-    pTextureDesc->Usage = D3D11_USAGE_DEFAULT;
-    pTextureDesc->BindFlags = 0;
-    pTextureDesc->CPUAccessFlags = 0;
-    pTextureDesc->MiscFlags = 0;
-
-    if (!(desc12.Flags & D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE))
-      pTextureDesc->BindFlags |= D3D11_BIND_SHADER_RESOURCE;
-
-    if (desc12.Flags & D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET)
-      pTextureDesc->BindFlags |= D3D11_BIND_RENDER_TARGET;
-
-    if (desc12.Flags & D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL)
-      pTextureDesc->BindFlags |= D3D11_BIND_DEPTH_STENCIL;
-
-    if (desc12.Flags & D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS)
-      pTextureDesc->BindFlags |= D3D11_BIND_UNORDERED_ACCESS;
-
-    if (pResourceFlags) {
-      pTextureDesc->BindFlags = pResourceFlags->BindFlags;
-      pTextureDesc->MiscFlags |= pResourceFlags->MiscFlags;
-      pTextureDesc->CPUAccessFlags = pResourceFlags->CPUAccessFlags;
-    }
-
-    return S_OK;
-  }
-
-
   BOOL D3D11CommonTexture::CheckImageSupport(
     const DxvkImageCreateInfo*  pImageInfo,
           VkImageTiling         Tiling) const {
-    // D3D12 images always use optimal tiling
-    if (m_11on12.Resource != nullptr && Tiling != VK_IMAGE_TILING_OPTIMAL)
-      return FALSE;
-
     DxvkFormatQuery formatQuery = { };
     formatQuery.format = pImageInfo->format;
     formatQuery.type = pImageInfo->type;
@@ -542,7 +486,7 @@ namespace dxvk {
     
     if (!properties)
       return FALSE;
-
+    
     return (pImageInfo->extent.width  <= properties->maxExtent.width)
         && (pImageInfo->extent.height <= properties->maxExtent.height)
         && (pImageInfo->extent.depth  <= properties->maxExtent.depth)
@@ -1084,10 +1028,9 @@ namespace dxvk {
   //      D 3 D 1 1 T E X T U R E 1 D
   D3D11Texture1D::D3D11Texture1D(
           D3D11Device*                pDevice,
-    const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-    const D3D11_ON_12_RESOURCE_INFO*  p11on12Info)
+    const D3D11_COMMON_TEXTURE_DESC*  pDesc)
   : D3D11DeviceChild<ID3D11Texture1D>(pDevice),
-    m_texture (this, pDevice, pDesc, p11on12Info, D3D11_RESOURCE_DIMENSION_TEXTURE1D, 0, VK_NULL_HANDLE, nullptr),
+    m_texture (this, pDevice, pDesc, D3D11_RESOURCE_DIMENSION_TEXTURE1D, 0, VK_NULL_HANDLE, nullptr),
     m_interop (this, &m_texture),
     m_surface (this, &m_texture),
     m_resource(this),
@@ -1187,10 +1130,9 @@ namespace dxvk {
   D3D11Texture2D::D3D11Texture2D(
           D3D11Device*                pDevice,
     const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-    const D3D11_ON_12_RESOURCE_INFO*  p11on12Info,
           HANDLE                      hSharedHandle)
   : D3D11DeviceChild<ID3D11Texture2D1>(pDevice),
-    m_texture   (this, pDevice, pDesc, p11on12Info, D3D11_RESOURCE_DIMENSION_TEXTURE2D, 0, VK_NULL_HANDLE, hSharedHandle),
+    m_texture   (this, pDevice, pDesc, D3D11_RESOURCE_DIMENSION_TEXTURE2D, 0, VK_NULL_HANDLE, hSharedHandle),
     m_interop   (this, &m_texture),
     m_surface   (this, &m_texture),
     m_resource  (this),
@@ -1205,7 +1147,7 @@ namespace dxvk {
           DXGI_USAGE                  DxgiUsage,
           VkImage                     vkImage)
   : D3D11DeviceChild<ID3D11Texture2D1>(pDevice),
-    m_texture   (this, pDevice, pDesc, nullptr, D3D11_RESOURCE_DIMENSION_TEXTURE2D, DxgiUsage, vkImage, nullptr),
+    m_texture   (this, pDevice, pDesc, D3D11_RESOURCE_DIMENSION_TEXTURE2D, DxgiUsage, vkImage, nullptr),
     m_interop   (this, &m_texture),
     m_surface   (this, &m_texture),
     m_resource  (this),
@@ -1221,7 +1163,7 @@ namespace dxvk {
     const D3D11_COMMON_TEXTURE_DESC*  pDesc,
           DXGI_USAGE                  DxgiUsage)
   : D3D11DeviceChild<ID3D11Texture2D1>(pDevice),
-    m_texture   (this, pDevice, pDesc, nullptr, D3D11_RESOURCE_DIMENSION_TEXTURE2D, DxgiUsage, VK_NULL_HANDLE, nullptr),
+    m_texture   (this, pDevice, pDesc, D3D11_RESOURCE_DIMENSION_TEXTURE2D, DxgiUsage, VK_NULL_HANDLE, nullptr),
     m_interop   (this, &m_texture),
     m_surface   (this, &m_texture),
     m_resource  (this),
@@ -1364,10 +1306,9 @@ namespace dxvk {
   //      D 3 D 1 1 T E X T U R E 3 D
   D3D11Texture3D::D3D11Texture3D(
           D3D11Device*                pDevice,
-    const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-    const D3D11_ON_12_RESOURCE_INFO*  p11on12Info)
+    const D3D11_COMMON_TEXTURE_DESC*  pDesc)
   : D3D11DeviceChild<ID3D11Texture3D1>(pDevice),
-    m_texture (this, pDevice, pDesc, p11on12Info, D3D11_RESOURCE_DIMENSION_TEXTURE3D, 0, VK_NULL_HANDLE, nullptr),
+    m_texture (this, pDevice, pDesc, D3D11_RESOURCE_DIMENSION_TEXTURE3D, 0, VK_NULL_HANDLE, nullptr),
     m_interop (this, &m_texture),
     m_resource(this),
     m_d3d10   (this) {
diff --git a/src/d3d11/d3d11_texture.h b/src/d3d11/d3d11_texture.h
index 3708d14f..bd778d71 100644
--- a/src/d3d11/d3d11_texture.h
+++ b/src/d3d11/d3d11_texture.h
@@ -7,7 +7,6 @@
 
 #include "d3d11_device_child.h"
 #include "d3d11_interfaces.h"
-#include "d3d11_on_12.h"
 #include "d3d11_resource.h"
 
 namespace dxvk {
@@ -86,7 +85,6 @@ namespace dxvk {
             ID3D11Resource*             pInterface,
             D3D11Device*                pDevice,
       const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-      const D3D11_ON_12_RESOURCE_INFO*  p11on12Info,
             D3D11_RESOURCE_DIMENSION    Dimension,
             DXGI_USAGE                  DxgiUsage,
             VkImage                     vkImage,
@@ -437,14 +435,6 @@ namespace dxvk {
             DXGI_FORMAT         Format,
             UINT                Plane) const;
     
-    /**
-     * \brief Retrieves D3D11on12 resource info
-     * \returns 11on12 resource info
-     */
-    D3D11_ON_12_RESOURCE_INFO Get11on12Info() const {
-      return m_11on12;
-    }
-
     /**
      * \brief Normalizes and validates texture description
      * 
@@ -457,19 +447,6 @@ namespace dxvk {
     static HRESULT NormalizeTextureProperties(
             D3D11_COMMON_TEXTURE_DESC* pDesc);
     
-    /**
-     * \brief Initializes D3D11 texture description from D3D12
-     *
-     * \param [in] pResource D3D12 resource
-     * \param [in] pResourceFlags D3D11 flag overrides
-     * \param [out] pTextureDesc D3D11 buffer description
-     * \returns \c S_OK if the parameters are valid
-     */
-    static HRESULT GetDescFromD3D12(
-            ID3D12Resource*         pResource,
-      const D3D11_RESOURCE_FLAGS*   pResourceFlags,
-            D3D11_COMMON_TEXTURE_DESC* pTextureDesc);
-
   private:
     
     struct MappedBuffer {
@@ -488,7 +465,6 @@ namespace dxvk {
     D3D11Device*                  m_device;
     D3D11_RESOURCE_DIMENSION      m_dimension;
     D3D11_COMMON_TEXTURE_DESC     m_desc;
-    D3D11_ON_12_RESOURCE_INFO     m_11on12;
     D3D11_COMMON_TEXTURE_MAP_MODE m_mapMode;
     DXGI_USAGE                    m_dxgiUsage;
     VkFormat                      m_packedFormat;
@@ -660,8 +636,7 @@ namespace dxvk {
     
     D3D11Texture1D(
             D3D11Device*                pDevice,
-      const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-      const D3D11_ON_12_RESOURCE_INFO*  p11on12Info);
+      const D3D11_COMMON_TEXTURE_DESC*  pDesc);
     
     ~D3D11Texture1D();
     
@@ -707,7 +682,6 @@ namespace dxvk {
     D3D11Texture2D(
             D3D11Device*                pDevice,
       const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-      const D3D11_ON_12_RESOURCE_INFO*  p11on12Info,
             HANDLE                      hSharedHandle);
 
     D3D11Texture2D(
@@ -773,8 +747,7 @@ namespace dxvk {
     
     D3D11Texture3D(
             D3D11Device*                pDevice,
-      const D3D11_COMMON_TEXTURE_DESC*  pDesc,
-      const D3D11_ON_12_RESOURCE_INFO*  p11on12Info);
+      const D3D11_COMMON_TEXTURE_DESC*  pDesc);
     
     ~D3D11Texture3D();
     
diff --git a/src/d3d11/meson.build b/src/d3d11/meson.build
index 4b71df30..ea51a9d5 100644
--- a/src/d3d11/meson.build
+++ b/src/d3d11/meson.build
@@ -42,7 +42,6 @@ d3d11_src = [
   'd3d11_input_layout.cpp',
   'd3d11_interop.cpp',
   'd3d11_main.cpp',
-  'd3d11_on_12.cpp',
   'd3d11_options.cpp',
   'd3d11_query.cpp',
   'd3d11_rasterizer.cpp',
diff --git a/src/d3d9/d3d9_swapchain.cpp b/src/d3d9/d3d9_swapchain.cpp
index 3807af03..4656abd6 100644
--- a/src/d3d9/d3d9_swapchain.cpp
+++ b/src/d3d9/d3d9_swapchain.cpp
@@ -946,8 +946,7 @@ namespace dxvk {
       VkImage imageHandle = m_presenter->getImage(i).image;
       
       Rc<DxvkImage> image = new DxvkImage(
-        m_device.ptr(), imageInfo, imageHandle,
-        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
+        m_device.ptr(), imageInfo, imageHandle);
 
       m_imageViews[i] = new DxvkImageView(
         m_device->vkd(), image, viewInfo);
diff --git a/src/dxvk/dxvk_device.cpp b/src/dxvk/dxvk_device.cpp
index 9a053791..09020bbc 100644
--- a/src/dxvk/dxvk_device.cpp
+++ b/src/dxvk/dxvk_device.cpp
@@ -178,6 +178,12 @@ namespace dxvk {
   }
   
   
+  Rc<DxvkImage> DxvkDevice::createImageFromVkImage(
+    const DxvkImageCreateInfo&  createInfo,
+          VkImage               image) {
+    return new DxvkImage(this, createInfo, image);
+  }
+  
   Rc<DxvkImageView> DxvkDevice::createImageView(
     const Rc<DxvkImage>&            image,
     const DxvkImageViewCreateInfo&  createInfo) {
@@ -214,22 +220,6 @@ namespace dxvk {
   }
   
   
-  Rc<DxvkBuffer> DxvkDevice::importBuffer(
-    const DxvkBufferCreateInfo& createInfo,
-    const DxvkBufferImportInfo& importInfo,
-          VkMemoryPropertyFlags memoryType) {
-    return new DxvkBuffer(this, createInfo, importInfo, memoryType);
-  }
-
-
-  Rc<DxvkImage> DxvkDevice::importImage(
-    const DxvkImageCreateInfo&  createInfo,
-          VkImage               image,
-          VkMemoryPropertyFlags memoryType) {
-    return new DxvkImage(this, createInfo, image, memoryType);
-  }
-
-
   DxvkMemoryStats DxvkDevice::getMemoryStats(uint32_t heap) {
     return m_objects.memoryManager().getMemoryStats(heap);
   }
diff --git a/src/dxvk/dxvk_device.h b/src/dxvk/dxvk_device.h
index a24ee311..d7b3ea4a 100644
--- a/src/dxvk/dxvk_device.h
+++ b/src/dxvk/dxvk_device.h
@@ -334,6 +334,17 @@ namespace dxvk {
       const DxvkImageCreateInfo&  createInfo,
             VkMemoryPropertyFlags memoryType);
 
+    /**
+     * \brief Creates an image object for an existing VkImage
+     * 
+     * \param [in] createInfo Image create info
+     * \param [in] image Vulkan image to wrap
+     * \returns The image object
+     */
+    Rc<DxvkImage> createImageFromVkImage(
+      const DxvkImageCreateInfo&  createInfo,
+            VkImage               image);
+    
     /**
      * \brief Creates an image view
      * 
@@ -360,32 +371,6 @@ namespace dxvk {
      */
     Rc<DxvkSparsePageAllocator> createSparsePageAllocator();
 
-    /**
-     * \brief Imports a buffer
-     *
-     * \param [in] createInfo Buffer create info
-     * \param [in] importInfo Buffer import info
-     * \param [in] memoryType Memory type flags
-     * \returns The buffer object
-     */
-    Rc<DxvkBuffer> importBuffer(
-      const DxvkBufferCreateInfo& createInfo,
-      const DxvkBufferImportInfo& importInfo,
-            VkMemoryPropertyFlags memoryType);
-
-    /**
-     * \brief Imports an image
-     *
-     * \param [in] createInfo Image create info
-     * \param [in] image Vulkan image to wrap
-     * \param [in] memoryType Memory type flags
-     * \returns The image object
-     */
-    Rc<DxvkImage> importImage(
-      const DxvkImageCreateInfo&  createInfo,
-            VkImage               image,
-            VkMemoryPropertyFlags memoryType);
-
     /**
      * \brief Retrieves stat counters
      * 
diff --git a/src/dxvk/dxvk_image.cpp b/src/dxvk/dxvk_image.cpp
index 8ddbd477..5d84386f 100644
--- a/src/dxvk/dxvk_image.cpp
+++ b/src/dxvk/dxvk_image.cpp
@@ -150,9 +150,9 @@ namespace dxvk {
   DxvkImage::DxvkImage(
           DxvkDevice*           device,
     const DxvkImageCreateInfo&  info,
-          VkImage               image,
-          VkMemoryPropertyFlags memFlags)
-  : m_vkd(device->vkd()), m_device(device), m_info(info), m_memFlags(memFlags), m_image({ image }) {
+          VkImage               image)
+  : m_vkd(device->vkd()), m_device(device), m_info(info), m_image({ image }) {
+    
     m_viewFormats.resize(info.viewFormatCount);
     for (uint32_t i = 0; i < info.viewFormatCount; i++)
       m_viewFormats[i] = info.viewFormats[i];
diff --git a/src/dxvk/dxvk_image.h b/src/dxvk/dxvk_image.h
index 3a09302b..a29d916c 100644
--- a/src/dxvk/dxvk_image.h
+++ b/src/dxvk/dxvk_image.h
@@ -144,8 +144,7 @@ namespace dxvk {
     DxvkImage(
             DxvkDevice*           device,
       const DxvkImageCreateInfo&  info,
-            VkImage               image,
-            VkMemoryPropertyFlags memFlags);
+            VkImage               image);
     
     /**
      * \brief Destroys image
